# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'dotenv'

package_json_content = File.read('../package.json')
package_json = JSON.parse(package_json_content)
version = package_json['version']

default_platform(:ios)

owner_name = "STS-ReactNative" # Update this value if you are not work on Saigon Technology Solutions

teamId = ENV["APPLE_TEAM_ID"]
envs = ['development', 'staging', 'production']
env = ''


my_ios_app = ENV["APPCENTER_APP_NAME_IOS"]
my_android_app = ENV["APPCENTER_APP_NAME_ANDROID"]



platform :ios do
  before_all do |lane, options|
      env = assert_environment(**options)
      Dotenv.load("../.env.#{env}")
  end

  desc "Build and upload to TestFlight"
  lane :upload do |options|
    projectName = ENV["PROJECT_NAME"]
    workspace ="./ios/#{projectName}.xcworkspace"
    xcodeproj = "./ios/#{projectName}.xcodeproj"
    scheme = case env
    when "development"
      "#{projectName}Dev"
    when "staging"
      "#{projectName}Stg"
    when "production"
      projectName
    else
      raise "Invalid environment: #{env}"
    end
    increment_version_number(xcodeproj: xcodeproj, version_number: version)
    if options[:ci]
      increment_build_number(xcodeproj: xcodeproj, build_number: options[:buildNumber])
      cert
      sigh(
        force: true,
        app_identifier: ENV["APP_ID"],
        team_id: teamId,
      )
      update_code_signing_settings(
        use_automatic_signing: false,
        team_id: teamId,
        bundle_identifier: ENV["APP_ID"],
        profile_name: ENV["APP_ID"] + " AppStore",
        targets: [projectName],
        code_sign_identity: 'Apple Distribution'
      )
  # Uncomment the line if your app have OneSignalNotificationServiceExtension
  #       sigh(
  #         force: true,
  #         app_identifier: ENV["APP_ID"] + ".OneSignalNotificationServiceExtension",
  #         team_id: teamId,
  #       )
  #       update_code_signing_settings(
  #         use_automatic_signing: false,
  #         team_id: teamId,
  #         bundle_identifier: ENV["APP_ID"] + ".OneSignalNotificationServiceExtension",
  #         profile_name: ENV["APP_ID"] + ".OneSignalNotificationServiceExtension AppStore",
  #         targets: ["OneSignalNotificationServiceExtension"]
  #       )
      unlock_keychain(
        password: ENV["KEYCHAIN_PASSWORD"]
      )
    end
    build_app(
    workspace: workspace,
    scheme: scheme,
    clean: true,
    xcargs: "-allowProvisioningUpdates",
    export_method: "app-store",
    export_options: {
      uploadBitcode: false,
      compileBitcode: false,
      provisioningProfiles: {
        ENV["APP_ID"] => ENV["APP_ID"] + " AppStore"
      }
    })

    upload_to_testflight(
        skip_waiting_for_build_processing: true,
        app_identifier: ENV["APP_ID"],
        changelog: "#{ENV["APPCENTER_RELEASE_NOTE"]}",
        itc_provider: teamId
    )
  end

  desc "====CODE PUSH===="
  lane :codepush do |options|
    sh "appcenter codepush release-react --token #{ENV["APPCENTER_TOKEN_IOS"]} -a #{owner_name}/#{my_ios_app} -d #{options[:env]} -t #{version} --mandatory true"
  end

  desc "Build or codepush" #type = [codepush, build]
  lane :build do |options|
    type = options[:type]
    if type === 'codepush'
      codepush(env:options[:env])
    elsif type === 'build'
      upload(env:options[:env], buildNumber: options[:buildNumber], ci: options[:ci])
    else
      printf "\nPlease enter type is [codepush, build]\n"
    end
  end
end



platform :android do

  before_all do |lane, options|
    env = assert_environment(**options)
    Dotenv.load("../.env.#{env}")
  end

  desc "Build file apk and upload to appcenter"
  lane :upload do |options|
    file = "app/build/outputs/apk/#{env}/release/app-#{env}-release.apk" #You can change this path to get file apk
    gradle(
      task: "assemble",
      flavor: "#{env.capitalize}",
      build_type: "Release",
      properties: {
        "VERSION_NAME" => version,
        "versionCode" => options[:buildNumber]
      },
      project_dir: 'android/'
    )
    appcenter_upload(
      api_token: ENV["APPCENTER_TOKEN_ANDROID"],
      owner_name: owner_name,
      app_name: ENV["APPCENTER_APP_NAME"],
      app_display_name: ENV["APPCENTER_APP_DISPLAY_NAME"],
      app_os: "Android",
      file: file,
      release_notes: ENV["APPCENTER_RELEASE_NOTE"],
      destinations: ENV["APPCENTER_DISTRIBUTE_DESTINATIONS"],
      notify_testers: true
    )
  end

  desc "====CODE PUSH===="
  lane :codepush do |options|
    sh "appcenter codepush release-react --token #{ENV["APPCENTER_TOKEN_ANDROID"]} -a #{owner_name}/#{my_android_app} -d #{options[:env]} -t #{version} --mandatory true"
  end

  desc "Build or codepush" #type = [codepush, build]
  lane :build do |options|
    type = options[:type]
    if type === 'codepush'
      codepush(env:options[:env])
    elsif type === 'build'
      upload(env:options[:env], buildNumber: options[:buildNumber])
    else
      printf "\nPlease enter type is [codepush, build]\n"
    end
  end
end

private_lane :assert_environment do |options|
  env = if options[:env] != nil
    options[:env].downcase
  elsif ENV.key?('RN_ACTIVE_ENV')
    ENV['RN_ACTIVE_ENV']
  else
    UI.user_error!('Whoops, missing environment: Use `fastlane --env VALUE` where VALUE can be: ' + envs.inspect)
    prompt_for_environment
  end
  env
end
